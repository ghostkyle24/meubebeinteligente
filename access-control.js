// Sistema de Controle de Acesso - Meu Beb√™ Inteligente
// Verifica se o usu√°rio tem acesso √†s p√°ginas de membros

// Configura√ß√µes
const ACCESS_CONFIG = {
    // P√°ginas que requerem login
    PROTECTED_PAGES: [
        'dashboard.html',
        'musicas.html',
        'videos.html',
        'desenhos.html',
        'brincadeiras.html',
        'jogos.html',
        'brinquedos.html',
        'censura.html',
        'admin-panel.html'
    ],
    
    // P√°ginas p√∫blicas (n√£o requerem login)
    PUBLIC_PAGES: [
        'index.html',
        'assinantes.html'
    ],
    
    // URL de redirecionamento para n√£o logados
    LOGIN_REDIRECT: 'assinantes.html'
};

// Fun√ß√£o principal de verifica√ß√£o de acesso
function checkAccess() {
    console.log('üîê VERIFICANDO ACESSO √Ä P√ÅGINA');
    
    // Obter nome da p√°gina atual
    const currentPage = getCurrentPageName();
    console.log('üìÑ P√°gina atual:', currentPage);
    
    // Verificar se √© uma p√°gina protegida
    if (ACCESS_CONFIG.PROTECTED_PAGES.includes(currentPage)) {
        console.log('üõ°Ô∏è P√ÅGINA PROTEGIDA - Verificando login...');
        return verifyUserAccess();
    } else {
        console.log('üåê P√ÅGINA P√öBLICA - Acesso liberado');
        return true;
    }
}

// Obter nome da p√°gina atual
function getCurrentPageName() {
    const path = window.location.pathname;
    const pageName = path.split('/').pop();
    return pageName || 'index.html';
}

// Verificar se o usu√°rio tem acesso
function verifyUserAccess() {
    console.log('üë§ VERIFICANDO USU√ÅRIO...');
    
    // Verificar se √© admin
    const isAdmin = localStorage.getItem('isAdmin') === 'true';
    const adminEmail = localStorage.getItem('adminEmail');
    
    if (isAdmin && adminEmail) {
        console.log('üëë USU√ÅRIO √â ADMIN - Acesso total permitido');
        return true;
    }
    
    // Verificar se usu√°rio est√° logado
    const isLoggedIn = localStorage.getItem('isLoggedIn');
    const userEmail = localStorage.getItem('userEmail');
    const paymentConfirmed = localStorage.getItem('paymentConfirmed');
    
    console.log('üìä DADOS DO USU√ÅRIO:', {
        isLoggedIn: isLoggedIn,
        userEmail: userEmail,
        paymentConfirmed: paymentConfirmed
    });
    
    if (!isLoggedIn || !userEmail) {
        console.log('‚ùå USU√ÅRIO N√ÉO LOGADO');
        redirectToLogin();
        return false;
    }
    
    if (!paymentConfirmed) {
        console.log('‚ùå PAGAMENTO N√ÉO CONFIRMADO');
        redirectToLogin();
        return false;
    }
    
    // Verificar se o plano ainda est√° v√°lido
    const userEndDate = localStorage.getItem('userEndDate');
    if (userEndDate) {
        const endDate = new Date(userEndDate);
        const now = new Date();
        
        if (now > endDate) {
            console.log('‚ùå PLANO EXPIRADO');
            redirectToLogin();
            return false;
        }
    }
    
    console.log('‚úÖ USU√ÅRIO AUTORIZADO - Acesso permitido');
    return true;
}

// Redirecionar para p√°gina de assinantes
function redirectToLogin(message) {
    console.log('üîÑ REDIRECIONANDO PARA P√ÅGINA DE ASSINANTES:', message);
    
    // Redirecionar diretamente para a p√°gina de assinantes
    window.location.href = ACCESS_CONFIG.LOGIN_REDIRECT;
}

// Verificar acesso ao carregar a p√°gina
function initAccessControl() {
    console.log('üöÄ INICIANDO CONTROLE DE ACESSO');
    
    // Aguardar um pouco para garantir que a p√°gina carregou
    setTimeout(() => {
        const hasAccess = checkAccess();
        
        if (!hasAccess) {
            console.log('üö´ ACESSO NEGADO - Redirecionando...');
            return;
        }
        
        console.log('‚úÖ ACESSO PERMITIDO - P√°gina carregada com sucesso');
        
        // Se chegou at√© aqui, o usu√°rio tem acesso
        // Pode executar c√≥digo espec√≠fico da p√°gina aqui
        onAccessGranted();
    }, 100);
}

// Fun√ß√£o chamada quando o acesso √© concedido
function onAccessGranted() {
    console.log('üéâ ACESSO CONCEDIDO - Executando c√≥digo da p√°gina');
    
    // Verificar se √© admin e mostrar funcionalidades espec√≠ficas
    const isAdmin = localStorage.getItem('isAdmin') === 'true';
    if (isAdmin) {
        console.log('üëë ADMIN DETECTADO - Carregando funcionalidades administrativas');
        loadAdminFeatures();
    }
}

// Carregar funcionalidades administrativas
function loadAdminFeatures() {
    // Verificar se o arquivo admin-features.js existe
    if (typeof showAdminFeatures === 'function') {
        console.log('üîß Carregando funcionalidades administrativas...');
        showAdminFeatures();
    } else {
        console.log('‚ö†Ô∏è Arquivo admin-features.js n√£o encontrado');
    }
}

// Fun√ß√£o para logout seguro
function secureLogout() {
    console.log('üö™ LOGOUT SEGURO');
    
    // Limpar dados sens√≠veis
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('userEndDate');
    localStorage.removeItem('userPlan');
    localStorage.removeItem('paymentConfirmed');
    localStorage.removeItem('isAdmin');
    localStorage.removeItem('adminEmail');
    
    // Redirecionar para p√°gina de assinantes
    window.location.href = 'assinantes.html';
}

// Verificar se a p√°gina atual requer prote√ß√£o
function isPageProtected(pageName = null) {
    const page = pageName || getCurrentPageName();
    return ACCESS_CONFIG.PROTECTED_PAGES.includes(page);
}

// Verificar se o usu√°rio est√° logado
function isUserLoggedIn() {
    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
    const userEmail = localStorage.getItem('userEmail');
    const paymentConfirmed = localStorage.getItem('paymentConfirmed') === 'true';
    
    return isLoggedIn && userEmail && paymentConfirmed;
}

// Verificar se √© admin
function isUserAdmin() {
    const isAdmin = localStorage.getItem('isAdmin') === 'true';
    const adminEmail = localStorage.getItem('adminEmail');
    
    return isAdmin && adminEmail;
}

// Exportar fun√ß√µes para uso global
if (typeof window !== 'undefined') {
    window.checkAccess = checkAccess;
    window.verifyUserAccess = verifyUserAccess;
    window.initAccessControl = initAccessControl;
    window.secureLogout = secureLogout;
    window.isPageProtected = isPageProtected;
    window.isUserLoggedIn = isUserLoggedIn;
    window.isUserAdmin = isUserAdmin;
}

// Inicializar automaticamente quando o DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAccessControl);
} else {
    initAccessControl();
}
